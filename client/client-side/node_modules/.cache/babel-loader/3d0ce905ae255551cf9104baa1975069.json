{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaizmailov/ml/wager_api/client/client-side/src/components_js/formUser.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayerForm(props) {\n  _s();\n\n  const [wagers, setWagers] = useState([{\n    username: \"JokerrNikita\",\n    game_type: \"Chess\",\n    website: \"Chess.com\",\n    description: \"1 game, 3 minute + 1 second addon.\",\n    wager_value: 5,\n    currency: \"USD\",\n    isOnline: true,\n    isCompleted: false\n  }]);\n\n  function toggleTodoCompleteAtIndex(index) {\n    const temporaryWagers = [...wagers];\n    temporaryWagers[index].isCompleted = !temporaryWagers[index].isCompleted;\n    setWagers(temporaryWagers);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formApp\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"wager-list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"form-ul-wager-list\",\n        children: wagers.map((wager, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `todo ${wager.isCompleted && 'todo-is-completed'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'checkbox',\n            onClick: () => toggleTodoCompleteAtIndex(index),\n            children: wager.isCompleted && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2714\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Your in-game username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: wager.username,\n            name: \"username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Choose game genre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"--Please choose an option--\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"chess\",\n              children: \"Chess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Website of the game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: wager.website,\n            name: \"username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n} // function Clicker(props) {\n//     const [count, setCount] = useState(0);\n//     const handleEvent = (event) => {\n//         setCount(count + 1)\n//     }\n//     // this is what is going to be rendered\n//     return (\n//         <div>\n//             <p>Вы кликнули {count} раз</p>\n//             <button onClick={handleEvent}>\n//                 Нажми на меня\n//             </button>\n//         </div>\n//     )\n// }\n// function NameDisplayer(props) {\n//     const [titleName, setTitle] = useState(\"Change Me!\");\n//     const handleChange = (event) => {\n//         setTitle(event.target.value);\n//     }\n//     return (\n//         <div>\n//             <h1>\n//                 Привет, {titleName}\n//             </h1>\n//             <input value={titleName} name=\"titleName\" onChange={handleChange}/>\n//         </div>\n//     )\n// }\n\n\n_s(PlayerForm, \"MjwdiNpZz8HK3c1KQyH6dwotAKQ=\");\n\n_c = PlayerForm;\nexport { PlayerForm };\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerForm\");","map":{"version":3,"sources":["/Users/nikitaizmailov/ml/wager_api/client/client-side/src/components_js/formUser.jsx"],"names":["React","useState","useEffect","useContext","PlayerForm","props","wagers","setWagers","username","game_type","website","description","wager_value","currency","isOnline","isCompleted","toggleTodoCompleteAtIndex","index","temporaryWagers","map","wager"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,UAApC,QAAqD,OAArD;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CACjC;AACIO,IAAAA,QAAQ,EAAE,cADd;AAEIC,IAAAA,SAAS,EAAE,OAFf;AAGIC,IAAAA,OAAO,EAAE,WAHb;AAIIC,IAAAA,WAAW,EAAE,oCAJjB;AAKIC,IAAAA,WAAW,EAAE,CALjB;AAMIC,IAAAA,QAAQ,EAAE,KANd;AAOIC,IAAAA,QAAQ,EAAE,IAPd;AAQIC,IAAAA,WAAW,EAAE;AARjB,GADiC,CAAD,CAApC;;AAaA,WAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AACtC,UAAMC,eAAe,GAAG,CAAC,GAAGZ,MAAJ,CAAxB;AACAY,IAAAA,eAAe,CAACD,KAAD,CAAf,CAAuBF,WAAvB,GAAqC,CAACG,eAAe,CAACD,KAAD,CAAf,CAAuBF,WAA7D;AACAR,IAAAA,SAAS,CAACW,eAAD,CAAT;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACI;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA,6BACI;AAAI,QAAA,SAAS,EAAC,oBAAd;AAAA,kBACSZ,MAAM,CAACa,GAAP,CAAW,CAACC,KAAD,EAAQH,KAAR,kBACR;AAAK,UAAA,SAAS,EAAG,QAAOG,KAAK,CAACL,WAAN,IAAqB,mBAAoB,EAAjE;AAAA,kCACI;AAAK,YAAA,SAAS,EAAE,UAAhB;AAA4B,YAAA,OAAO,EAAE,MAAMC,yBAAyB,CAACC,KAAD,CAApE;AAAA,sBACCG,KAAK,CAACL,WAAN,iBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADvB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJR,eAKQ;AACA,YAAA,IAAI,EAAC,MADL;AAEA,YAAA,KAAK,EAAEK,KAAK,CAACZ,QAFb;AAGA,YAAA,IAAI,EAAC;AAHL;AAAA;AAAA;AAAA;AAAA,kBALR,eAUQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVR,eAWQ;AAAA,oCACI;AAAQ,cAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXR,eAeQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfR,eAgBQ;AACA,YAAA,IAAI,EAAC,MADL;AAEA,YAAA,KAAK,EAAEY,KAAK,CAACV,OAFb;AAGA,YAAA,IAAI,EAAC;AAHL;AAAA;AAAA;AAAA;AAAA,kBAhBR;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH;AADT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,C,CAKD;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA7FSN,U;;KAAAA,U;AA+FT,SAAQA,UAAR","sourcesContent":["import React, {useState, useEffect, useContext} from \"react\"\n\nfunction PlayerForm(props) {\n    \n    const [wagers, setWagers] = useState([\n        {\n            username: \"JokerrNikita\",\n            game_type: \"Chess\",\n            website: \"Chess.com\",\n            description: \"1 game, 3 minute + 1 second addon.\",\n            wager_value: 5,\n            currency: \"USD\",\n            isOnline: true,\n            isCompleted: false\n        },\n    ])\n\n    function toggleTodoCompleteAtIndex(index) {\n        const temporaryWagers = [...wagers];\n        temporaryWagers[index].isCompleted = !temporaryWagers[index].isCompleted;\n        setWagers(temporaryWagers);\n    }\n\n    return (\n        <div className=\"formApp\">\n            <form className=\"wager-list\">\n                <ul className='form-ul-wager-list'>\n                        {wagers.map((wager, index) => (\n                            <div className={`todo ${wager.isCompleted && 'todo-is-completed'}`}>\n                                <div className={'checkbox'} onClick={() => toggleTodoCompleteAtIndex(index)}>\n                                {wager.isCompleted && (<span>&#x2714;</span>)}\n                                </div>\n                                    <label>Your in-game username</label>\n                                    <input\n                                    type=\"text\"\n                                    value={wager.username}\n                                    name=\"username\"\n                                    />\n                                    <label>Choose game genre</label>\n                                    <select>\n                                        <option value=\"\">--Please choose an option--</option>\n                                        <option value=\"chess\">Chess</option>\n                                    </select>\n                                    <label>Website of the game</label>\n                                    <input\n                                    type=\"text\"\n                                    value={wager.website}\n                                    name=\"username\"\n                                    />\n                            </div>\n                        ))}\n                </ul>\n            </form>\n        </div>\n    )\n\n}\n\n\n\n\n// function Clicker(props) {\n//     const [count, setCount] = useState(0);\n\n//     const handleEvent = (event) => {\n//         setCount(count + 1)\n//     }\n\n//     // this is what is going to be rendered\n//     return (\n//         <div>\n//             <p>Вы кликнули {count} раз</p>\n//             <button onClick={handleEvent}>\n//                 Нажми на меня\n//             </button>\n//         </div>\n//     )\n// }\n\n// function NameDisplayer(props) {\n\n//     const [titleName, setTitle] = useState(\"Change Me!\");\n\n//     const handleChange = (event) => {\n//         setTitle(event.target.value);\n//     }\n\n//     return (\n//         <div>\n//             <h1>\n//                 Привет, {titleName}\n//             </h1>\n//             <input value={titleName} name=\"titleName\" onChange={handleChange}/>\n//         </div>\n//     )\n// }\n\nexport {PlayerForm}"]},"metadata":{},"sourceType":"module"}